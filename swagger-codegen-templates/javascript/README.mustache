# {{projectName}}

{{moduleName}} - JavaScript client for {{projectName}}
{{#appDescription}}
  {{{appDescription}}}
{{/appDescription}}
This SDK is automatically generated by the [Swagger Codegen](https://github.com/swagger-api/swagger-codegen) project:

- API version: {{appVersion}}
- Package version: {{projectVersion}}
{{^hideGenerationTimestamp}}
  - Build date: {{generatedDate}}
{{/hideGenerationTimestamp}}
- Build package: {{generatorClass}}
{{#infoUrl}}
  For more information, please visit [{{{infoUrl}}}]({{{infoUrl}}})
{{/infoUrl}}

## Installation

### For [Node.js](https://nodejs.org/)

#### npm

To publish the library as a [npm](https://www.npmjs.com/),
please follow the procedure in ["Publishing npm packages"](https://docs.npmjs.com/getting-started/publishing-npm-packages).

Then install it via:

```shell
npm install {{{projectName}}} --save
```

##### Local development

To use the library locally without publishing to a remote npm registry, first install the dependencies by changing
into the directory containing `package.json` (and this README). Let's call this `JAVASCRIPT_CLIENT_DIR`. Then run:

```shell
npm install
```

Next, [link](https://docs.npmjs.com/cli/link) it globally in npm with the following, also from `JAVASCRIPT_CLIENT_DIR`:

```shell
npm link
```

Finally, switch to the directory you want to use your {{{projectName}}} from, and run:

```shell
npm link /path/to/<JAVASCRIPT_CLIENT_DIR>
  ```

  You should now be able to `require('{{{projectName}}}')` in javascript files from the directory you ran the last
  command above from.

  #### git
  #
  If the library is hosted at a git repository, e.g.
  https://github.com/{{#gitUserId}}{{.}}{{/gitUserId}}{{^gitUserId}}YOUR_USERNAME{{/gitUserId}}/{{#gitRepoId}}{{.}}{{/gitRepoId}}{{^gitRepoId}}{{projectName}}{{/gitRepoId}}
  then install it via:

  ```shell
  npm install {{#gitUserId}}{{.}}{{/gitUserId}}{{^gitUserId}}YOUR_USERNAME{{/gitUserId}}/{{#gitRepoId}}{{.}}{{/gitRepoId}}{{^gitRepoId}}{{projectName}}{{/gitRepoId}} --save
  ```

  ### For browser

  The library also works in the browser environment via npm and [browserify](http://browserify.org/). After following
  the above steps with Node.js and installing browserify with `npm install -g browserify`,
  perform the following (assuming *main.js* is your entry file, that's to say your javascript file where you actually
  use this library):

  ```shell
  browserify main.js > bundle.js
  ```

  Then include *bundle.js* in the HTML pages.

  ### Webpack Configuration

  Using Webpack you may encounter the following error: "Module not found: Error:
  Cannot resolve module", most certainly you should disable AMD loader. Add/merge
  the following section to your webpack config:

  ```javascript
  module: {
  rules: [
  {
  parser: {
  amd: false
  }
  }
  ]
  }
  ```

  ## Documentation for API Endpoints

  All URIs are relative to *{{basePath}}*

  Class | Method | HTTP request | Description
  ------------ | ------------- | ------------- | -------------
{{#apiInfo}}{{#apis}}{{#operations}}{{#operation}}*{{moduleName}}.{{classname}}* | [**{{operationId}}**](https://github.com/launchdarkly/api-client-javascript/blob/{{version}}/{{apiDocPath}}{{classname}}.md#{{operationId}}) | **{{httpMethod}}** {{path}} | {{#summary}}{{summary}}{{/summary}}
{{/operation}}{{/operations}}{{/apis}}{{/apiInfo}}

  ## Documentation for Models

{{#models}}{{#model}} - [{{moduleName}}.{{classname}}](https://github.com/launchdarkly/api-client-javascript/blob/{{version}}/{{modelDocPath}}{{classname}}.md)
{{/model}}{{/models}}

  ## Documentation for Authorization

{{^authMethods}} All endpoints do not require authorization.
{{/authMethods}}{{#authMethods}}{{#last}} Authentication schemes defined for the API:{{/last}}{{/authMethods}}
{{#authMethods}}### {{name}}

{{#isApiKey}}- **Type**: API key
  - **API key parameter name**: {{keyParamName}}
  - **Location**: {{#isKeyInQuery}}URL query string{{/isKeyInQuery}}{{#isKeyInHeader}}HTTP header{{/isKeyInHeader}}
{{/isApiKey}}
{{#isBasic}}- **Type**: HTTP basic authentication
{{/isBasic}}
{{#isOAuth}}- **Type**: OAuth
  - **Flow**: {{flow}}
  - **Authorization URL**: {{authorizationUrl}}
  - **Scopes**: {{^scopes}}N/A{{/scopes}}
{{#scopes}}  - {{scope}}: {{description}}
{{/scopes}}
{{/isOAuth}}

{{/authMethods}}